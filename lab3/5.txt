#include <bits/stdc++.h>

using namespace std;

int find_g(int p);
int pow_mod(int a, int x, int p);
void from_dec_to_bin(int x, vector <int> &binary);
int randomizer(int a, int b);
void print(int m, int d, int g, int p, int x, int k, int r, int e, int me);
int mul_mod(int a, int b, int n);
void converter(vector <int> &file, string name_file);

int main() {
    int g, p;
    string name_file;
    cout << "Input prime value 'p':";
    cin >> p;
    cout << endl;
    g = find_g(p);
    if (g == -1) {
        cout << "No have 'g' for this 'p'";
    } else {
        cout << "Input name textfile:";
        cin >> name_file;
        cout << endl;
        vector <int> file;
        converter(file, name_file);
        int x = randomizer(2, p - 2);
        int d = pow_mod(g, x, p);
        
        int k = randomizer(2, p - 3);
        int r = pow_mod(g, k, p);
        for (auto it: file) {
            int m = it;
            int e = mul_mod(m, pow_mod(d, k, p), p);
            int me = mul_mod(e, pow_mod(r, (p - x - 1), p), p);
            print(m, d, g, p, x, k, r, e, me);
        }
        
    }
    return 0;
}

int find_g(int p) {
    int q = (p - 1) / 2, g = 0;
    for (int i = 2; i < (p - 1); ++i) {
        if (pow_mod(i, q, p) != 1) {
            g = i;
            break;
        }
    }
    return (g == 0) ? -1 : g;
}

int pow_mod(int a, int x, int p) {
    vector <int> binary;
    from_dec_to_bin(x, binary);
    int y = 1, s = a;
    for (auto it: binary) {
        y = it == 1 ? (y * s) % p : y;
        s = (s * s) % p;
    }
    return y;
}

void from_dec_to_bin(int x, vector <int> &binary) {
    while (x) {
        binary.push_back(x % 2);
        x = (int)(x / 2);
    }
}

int randomizer(int a, int b) {
    random_device random_device; // Источник энтропии.
    mt19937 generator(random_device()); // Генератор случайных чисел.
    uniform_int_distribution<> distribution(a, b);  // Равномерное распределение
    return distribution(generator);
}

void print(int m, int d, int g, int p, int x, int k, int r, int e, int me) {
    cout << "-------------------------" << endl;
    cout << "Message: " << (char)m << endl;
    cout << "-------------------------" << endl;
    cout << "Public key: (" << d << ", " << g << ", " << p << ')' << endl; 
    cout << "Private key: " << x << endl;
    cout << "-------------------------" << endl;
    cout << "Session key: " << k << endl;
    cout << "-------------------------" << endl;
    cout << "Encrypted message: (" << r << ", " << e << ')' << endl;
    cout << "-------------------------" << endl;
    cout << "Decrypted message: " << (char)me << endl;
    cout << "-------------------------" << endl;
}

int mul_mod(int a, int b, int n) {
    int sum = 0;
    for (int i = 0; i < b; ++i) {
        sum += a;
        if(sum >= n) {
            sum -= n;
        }
    }
    return sum;
}

void converter(vector <int> &file, string name_file) {
    char sym;
    const char* name = name_file.c_str();
    FILE* fin = fopen(name, "r");
    do {
        sym = fgetc(fin);
        if (sym != EOF) {
            file.push_back(sym);
        }
    } while (sym != EOF);
    fclose(fin);
}