#include <bits/stdc++.h>

using namespace std;

void gost(int t, int q);
double congruential(int &);
int pow_mod(int a, int x, int p);
void from_dec_to_bin(int x, vector <int> &binary);
int size(int ch);

int main()
{
    int t, q;
    cin >> t >> q;
    gost(t, q);
    return 0;
}

void gost(int t, int q) {
    int k = pow(2, t - 1), p = 0, x0 = 2, N;
    for (int u = 0; ; u += 2) {
        do {
            double e = 0; //congruential(x0);
            N = ceil(k / (float)q) + ceil(k * e / q);
            N = N % 2 == 0 ? N : N + 1;
            p = (N + u) * q + 1;
        } while (p > pow(2 ,t));
        if ((pow_mod(2, p - 1, p) == 1) && (pow_mod(2, N + u, p) != 1)) {
            cout << p << endl;
            break;
        }
    }
}

double congruential(int &x) { // Конгруэнтный метод формирования псевдослучайных чисел
    const int m = 100, a = 8, inc = 65;
    x = ((a * x) + inc) % m;
    return (x / double(m));
}

int pow_mod(int a, int x, int p) {
    vector <int> binary;
    from_dec_to_bin(x, binary);
    int y = 1, s = a;
    for (auto it: binary) {
        y = it == 1 ? (y * s) % p : y;
        s = (s * s) % p;
    }
    return y;
}

void from_dec_to_bin(int x, vector <int> &binary) {
    while (x) {
        binary.push_back(x % 2);
        x = (int)(x / 2);
    }
}

int size(int ch) {
    int count = 0;
    while(ch) {
        count++;
        ch /= 2;
    }
    return count;
}